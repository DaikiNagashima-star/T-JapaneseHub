---
interface Props {
  user: {
    user_metadata: {
      avatar_url?: string;
      full_name?: string;
      name?: string;
    };
    email: string;
  };
}

const { user } = Astro.props;
const displayName = user.user_metadata.full_name || user.user_metadata.name || 'User';
---

<div class="user-menu">
  <button id="userMenuButton" class="menu-button">
    <img 
      src={user.user_metadata.avatar_url || "https://api.dicebear.com/7.x/avataaars/svg?seed=default"} 
      alt="Profile" 
      class="avatar"
    />
    <span class="user-name">{displayName}</span>
  </button>

  <div id="userDropdown" class="dropdown" style="display: none;">
    <div class="dropdown-header">
      <img 
        src={user.user_metadata.avatar_url || "https://api.dicebear.com/7.x/avataaars/svg?seed=default"} 
        alt="Profile" 
        class="dropdown-avatar"
      />
      <div class="user-info">
        <p class="user-name">{displayName}</p>
        <p class="user-email">{user.email}</p>
      </div>
    </div>
    
    <div class="dropdown-content">
      <a href="/profile" class="menu-item">
        <svg class="menu-icon" viewBox="0 0 24 24" width="20" height="20">
          <path fill="currentColor" d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
        </svg>
        Profile
      </a>
      <button id="signOutButton" class="menu-item">
        <svg class="menu-icon" viewBox="0 0 24 24" width="20" height="20">
          <path fill="currentColor" d="M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.58L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z"/>
        </svg>
        Sign out
      </button>
    </div>
  </div>
</div>

<script>
  function setupUserMenu() {
    const menuButton = document.getElementById('userMenuButton');
    const dropdown = document.getElementById('userDropdown');
    const signOutButton = document.getElementById('signOutButton');

    if (!menuButton || !dropdown || !signOutButton) return;

    menuButton.addEventListener('click', () => {
      const isHidden = dropdown.style.display === 'none';
      dropdown.style.display = isHidden ? 'block' : 'none';
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!menuButton.contains(e.target as Node) && !dropdown.contains(e.target as Node)) {
        dropdown.style.display = 'none';
      }
    });

    signOutButton.addEventListener('click', async () => {
      try {
        const { supabase } = await import('../../lib/supabase');
        const { error } = await supabase.auth.signOut();
        if (error) throw error;
        window.location.reload();
      } catch (error) {
        console.error('Error signing out:', error);
        alert('Failed to sign out. Please try again.');
      }
    });
  }

  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', setupUserMenu);
</script>

<style>
  .user-menu {
    position: relative;
  }
  .menu-button {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem;
    border: none;
    background: none;
    cursor: pointer;
  }
  .avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    object-fit: cover;
  }
  .user-name {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--text-primary);
  }
  .dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    width: 280px;
    background: white;
    border-radius: 0.75rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    margin-top: 0.5rem;
    z-index: 50;
  }
  .dropdown-header {
    padding: 1rem;
    border-bottom: 1px solid var(--border);
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  .dropdown-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
  }
  .user-info {
    flex: 1;
    min-width: 0;
  }
  .user-email {
    color: var(--text-secondary);
    font-size: 0.75rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  .dropdown-content {
    padding: 0.5rem;
  }
  .menu-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    width: 100%;
    padding: 0.75rem;
    border: none;
    background: none;
    color: var(--text-primary);
    font-size: 0.875rem;
    text-decoration: none;
    border-radius: 0.5rem;
    cursor: pointer;
  }
  .menu-item:hover {
    background: var(--background);
  }
  .menu-icon {
    color: var(--text-secondary);
  }
</style>