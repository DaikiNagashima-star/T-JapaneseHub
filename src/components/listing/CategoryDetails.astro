---
interface Props {
  category: string;
  details: any;
}

const { category, details } = Astro.props;

function formatDate(dateString: string | null | undefined): string {
  if (!dateString) return 'Not specified';
  try {
    return new Date(dateString).toLocaleDateString();
  } catch (e) {
    return 'Invalid date';
  }
}
---

<div class="category-details">
  {category === 'house' && (
    <div class="details-grid">
      <div class="detail-item">
        <span class="label">Bedrooms:</span>
        <span class="value">{details.bedrooms || 'Not specified'}</span>
      </div>
      <div class="detail-item">
        <span class="label">Bathrooms:</span>
        <span class="value">{details.bathrooms || 'Not specified'}</span>
      </div>
      <div class="detail-item">
        <span class="label">Pet Policy:</span>
        <span class="value">{details.pet_policy || 'Not specified'}</span>
      </div>
      <div class="detail-item">
        <span class="label">Available From:</span>
        <span class="value">{formatDate(details.available_date)}</span>
      </div>
      {details.utilities && details.utilities.length > 0 && (
        <div class="detail-item full-width">
          <span class="label">Utilities Included:</span>
          <div class="tags">
            {details.utilities.map((utility: string) => (
              <span class="tag">{utility}</span>
            ))}
          </div>
        </div>
      )}
      {details.features && details.features.length > 0 && (
        <div class="detail-item full-width">
          <span class="label">Features:</span>
          <div class="tags">
            {details.features.map((feature: string) => (
              <span class="tag">{feature}</span>
            ))}
          </div>
        </div>
      )}
    </div>
  )}

  {category === 'market' && (
    <div class="details-grid">
      <div class="detail-item">
        <span class="label">Condition:</span>
        <span class="value">{details.condition || 'Not specified'}</span>
      </div>
      {details.brand && (
        <div class="detail-item">
          <span class="label">Brand:</span>
          <span class="value">{details.brand}</span>
        </div>
      )}
      {details.model && (
        <div class="detail-item">
          <span class="label">Model:</span>
          <span class="value">{details.model}</span>
        </div>
      )}
      {details.original_price && (
        <div class="detail-item">
          <span class="label">Original Price:</span>
          <span class="value">${details.original_price}</span>
        </div>
      )}
      {details.features && details.features.length > 0 && (
        <div class="detail-item full-width">
          <span class="label">Features:</span>
          <div class="tags">
            {details.features.map((feature: string) => (
              <span class="tag">{feature}</span>
            ))}
          </div>
        </div>
      )}
    </div>
  )}

  {category === 'job' && (
    <div class="details-grid">
      <div class="detail-item">
        <span class="label">Employment Type:</span>
        <span class="value">{details.employment_type || 'Not specified'}</span>
      </div>
      <div class="detail-item">
        <span class="label">Experience Level:</span>
        <span class="value">{details.experience_level || 'Not specified'}</span>
      </div>
      {details.deadline && (
        <div class="detail-item">
          <span class="label">Application Deadline:</span>
          <span class="value">{formatDate(details.deadline)}</span>
        </div>
      )}
      {details.benefits && details.benefits.length > 0 && (
        <div class="detail-item full-width">
          <span class="label">Benefits:</span>
          <div class="tags">
            {details.benefits.map((benefit: string) => (
              <span class="tag">{benefit}</span>
            ))}
          </div>
        </div>
      )}
    </div>
  )}
</div>

<style>
  .category-details {
    background: white;
    border-radius: 0.75rem;
    padding: 1.5rem;
    margin-top: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  .details-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }
  .detail-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }
  .detail-item.full-width {
    grid-column: 1 / -1;
  }
  .label {
    font-size: 0.875rem;
    color: var(--text-secondary);
  }
  .value {
    font-weight: 500;
    color: var(--text-primary);
  }
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  .tag {
    background: var(--background);
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.875rem;
    color: var(--text-secondary);
  }
</style>