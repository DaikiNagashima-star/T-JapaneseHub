---
import { supabase } from '../../lib/supabase';

const { contact } = Astro.props;
const { data: { session } } = await supabase.auth.getSession();
---

<div class="contact-card">
  <h2 class="card-title">
    <svg class="icon" viewBox="0 0 24 24" width="20" height="20">
      <path fill="currentColor" d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0-6c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm0 7c-2.67 0-8 1.34-8 4v3h16v-3c0-2.66-5.33-4-8-4zm6 5H6v-.99c.2-.72 3.3-2.01 6-2.01s5.8 1.29 6 2v1z"/>
    </svg>
    Contact Information
  </h2>
  
  <div class="contact-details">
    <div class="contact-item">
      <span class="label">Name:</span>
      <span class="value">{contact.name}</span>
    </div>
    
    <div class="contact-item">
      <span class="label">Email:</span>
      <span class="value">{contact.email}</span>
    </div>
    
    {contact.phone && (
      <div class="contact-item">
        <span class="label">Phone:</span>
        <a href={`tel:${contact.phone}`} class="value link">{contact.phone}</a>
      </div>
    )}
  </div>

  <div class="contact-actions">
    {session ? (
      <button id="startChat" class="action-button chat" data-contact={JSON.stringify(contact)}>
        <svg class="chat-icon" viewBox="0 0 24 24" width="16" height="16">
          <path fill="currentColor" d="M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H6l-2 2V4h16v12z"/>
        </svg>
        Start Chat
      </button>
    ) : (
      <button onclick="window.location.href='/profile'" class="action-button chat">
        Sign in to Chat
      </button>
    )}
    {contact.phone && <a href={`tel:${contact.phone}`} class="action-button phone">Call Now</a>}
  </div>
</div>

<script>
  // Import Firebase modules using dynamic import
  let db;
  async function initFirebase() {
    const { getFirestore, collection, query, where, getDocs, addDoc } = await import('firebase/firestore');
    const { initializeApp } = await import('firebase/app');
    
    const firebaseConfig = {
      apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
      authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
      projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
      storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
      messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
      appId: import.meta.env.PUBLIC_FIREBASE_APP_ID,
      measurementId: import.meta.env.PUBLIC_FIREBASE_MEASUREMENT_ID
    };

    const app = initializeApp(firebaseConfig);
    db = getFirestore(app);
    return { collection, query, where, getDocs, addDoc };
  }

  async function createOrGetChat(userId, contactEmail) {
    const { collection, query, where, getDocs, addDoc } = await initFirebase();
    const chatsRef = collection(db, 'chats');
    
    // Check if chat already exists
    const q = query(
      chatsRef,
      where('participants', 'array-contains', userId)
    );
    
    const querySnapshot = await getDocs(q);
    let existingChat = null;
    
    querySnapshot.forEach((doc) => {
      const chatData = doc.data();
      if (chatData.participants.includes(contactEmail)) {
        existingChat = { id: doc.id, ...chatData };
      }
    });
    
    if (existingChat) {
      return existingChat.id;
    }
    
    // Create new chat
    const newChat = await addDoc(chatsRef, {
      participants: [userId, contactEmail],
      createdAt: new Date()
    });
    
    return newChat.id;
  }

  document.getElementById('startChat')?.addEventListener('click', async (e) => {
    try {
      const button = e.currentTarget;
      const contact = JSON.parse(button.dataset.contact || '{}');
      
      const { supabase } = await import('../../lib/supabase');
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) {
        window.location.href = '/profile';
        return;
      }

      const chatId = await createOrGetChat(session.user.id, contact.email);
      window.location.href = `/messages/${chatId}`;
    } catch (error) {
      console.error('Error starting chat:', error);
      alert('Failed to start chat. Please try again.');
    }
  });
</script>

<style>
  .contact-card {
    background: white;
    border-radius: 0.75rem;
    padding: 1rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  .card-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1rem;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }
  .icon {
    color: var(--primary);
  }
  .contact-details {
    margin-bottom: 1rem;
  }
  .contact-item {
    display: flex;
    margin-bottom: 0.5rem;
  }
  .label {
    width: 3.5rem;
    color: var(--text-secondary);
    font-size: 0.8rem;
  }
  .value {
    color: var(--text-primary);
    font-weight: 500;
    font-size: 0.8rem;
  }
  .link {
    color: var(--primary);
    text-decoration: none;
  }
  .link:hover {
    text-decoration: underline;
  }
  .contact-actions {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
  }
  .action-button {
    padding: 0.5rem;
    border-radius: 0.5rem;
    text-align: center;
    text-decoration: none;
    font-weight: 500;
    font-size: 0.8rem;
    transition: opacity 0.2s;
    border: none;
    cursor: pointer;
  }
  .action-button:hover {
    opacity: 0.9;
  }
  .action-button.chat {
    background: var(--primary);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }
  .action-button.phone {
    background: #10b981;
    color: white;
  }
  .chat-icon {
    fill: currentColor;
  }
</style>