---
import { supabase } from '../../lib/supabase';

const { chatId, recipientId } = Astro.props;
const { data: { session } } = await supabase.auth.getSession();
const currentUser = session?.user;
---

<div class="chat-room">
  <div id="messages" class="messages"></div>
  
  <div class="input-area">
    <textarea 
      id="messageInput" 
      placeholder="Type a message..." 
      class="message-input"
    ></textarea>
    <button id="sendButton" class="send-button">Send</button>
  </div>
</div>

<script define:vars={{ chatId, recipientId, currentUser }}>
  import { collection, query, orderBy, onSnapshot, addDoc, serverTimestamp } from 'firebase/firestore';
  import { db } from '../../lib/firebase';

  const messagesDiv = document.getElementById('messages');
  const messageInput = document.getElementById('messageInput');
  const sendButton = document.getElementById('sendButton');

  // Scroll to bottom of messages
  function scrollToBottom() {
    if (messagesDiv) {
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }
  }

  // Format timestamp
  function formatTime(timestamp) {
    if (!timestamp) return '';
    const date = timestamp.toDate();
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  }

  // Listen for messages
  const q = query(
    collection(db, `chats/${chatId}/messages`),
    orderBy('timestamp', 'asc')
  );

  const unsubscribe = onSnapshot(q, (snapshot) => {
    snapshot.docChanges().forEach((change) => {
      if (change.type === 'added') {
        const message = change.doc.data();
        const messageEl = document.createElement('div');
        const isSender = message.senderId === currentUser?.id;
        
        messageEl.className = `message ${isSender ? 'sent' : 'received'}`;
        messageEl.innerHTML = `
          <div class="message-content">
            ${message.text}
          </div>
          <div class="message-time">
            ${formatTime(message.timestamp)}
          </div>
        `;
        
        messagesDiv?.appendChild(messageEl);
        scrollToBottom();
      }
    });
  });

  // Send message
  async function sendMessage() {
    const text = messageInput?.value.trim();
    if (!text || !currentUser) return;

    try {
      await addDoc(collection(db, `chats/${chatId}/messages`), {
        text,
        senderId: currentUser.id,
        receiverId: recipientId,
        timestamp: serverTimestamp()
      });
      
      messageInput.value = '';
      messageInput.style.height = 'auto';
    } catch (error) {
      console.error('Error sending message:', error);
      alert('Failed to send message. Please try again.');
    }
  }

  // Event listeners
  sendButton?.addEventListener('click', sendMessage);
  
  messageInput?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });

  // Auto-resize textarea
  messageInput?.addEventListener('input', () => {
    messageInput.style.height = 'auto';
    messageInput.style.height = messageInput.scrollHeight + 'px';
  });

  // Cleanup
  document.addEventListener('astro:before-swap', () => {
    unsubscribe();
  });
</script>

<style>
  .chat-room {
    display: flex;
    flex-direction: column;
    height: 100%;
    background: white;
  }
  .messages {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .message {
    max-width: 70%;
  }
  .message.sent {
    align-self: flex-end;
  }
  .message.received {
    align-self: flex-start;
  }
  .message-content {
    padding: 0.75rem 1rem;
    border-radius: 1rem;
    background: #f3f4f6;
    white-space: pre-wrap;
    word-break: break-word;
  }
  .message.sent .message-content {
    background: var(--primary);
    color: white;
  }
  .message-time {
    font-size: 0.75rem;
    color: var(--text-secondary);
    margin-top: 0.25rem;
    text-align: right;
  }
  .input-area {
    padding: 1rem;
    border-top: 1px solid var(--border);
    display: flex;
    gap: 1rem;
    background: white;
  }
  .message-input {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid var(--border);
    border-radius: 0.5rem;
    resize: none;
    min-height: 42px;
    max-height: 120px;
    font-family: inherit;
    font-size: 0.875rem;
    line-height: 1.5;
  }
  .message-input:focus {
    outline: none;
    border-color: var(--primary);
  }
  .send-button {
    padding: 0.75rem 1.5rem;
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 0.5rem;
    font-weight: 500;
    cursor: pointer;
    transition: opacity 0.2s;
  }
  .send-button:hover {
    opacity: 0.9;
  }
</style>