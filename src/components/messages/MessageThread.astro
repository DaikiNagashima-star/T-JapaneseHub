---
import { getMessages } from '../../services/messageService';
const messages = await getMessages();
---

<div class="message-thread">
  <div class="thread-header">
    <div class="thread-info">
      <img src="/default-avatar.png" alt="" class="thread-avatar" />
      <div class="thread-name">John Doe</div>
    </div>
  </div>

  <div class="messages" id="messageContainer">
    {messages.map(message => (
      <div class={`message ${message.isSender ? 'sent' : 'received'}`}>
        <div class="message-content">{message.content}</div>
        <div class="message-time">{message.time}</div>
      </div>
    ))}
  </div>

  <div class="message-input">
    <textarea 
      id="messageText" 
      placeholder="Type a message..." 
      rows="1"
    ></textarea>
    <button id="sendMessage" class="send-button">Send</button>
  </div>
</div>

<script>
  import { sendMessage } from '../../services/messageService';

  const messageText = document.getElementById('messageText') as HTMLTextAreaElement;
  const sendButton = document.getElementById('sendMessage');
  const messageContainer = document.getElementById('messageContainer');

  // Auto-resize textarea
  messageText?.addEventListener('input', () => {
    messageText.style.height = 'auto';
    messageText.style.height = messageText.scrollHeight + 'px';
  });

  // Send message
  sendButton?.addEventListener('click', async () => {
    if (!messageText?.value.trim()) return;

    try {
      await sendMessage(messageText.value);
      messageText.value = '';
      messageText.style.height = 'auto';
    } catch (error) {
      console.error('Failed to send message:', error);
      alert('Failed to send message. Please try again.');
    }
  });

  // Handle Enter key
  messageText?.addEventListener('keypress', async (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendButton?.click();
    }
  });
</script>

<style>
  .message-thread {
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  .thread-header {
    padding: 1rem;
    border-bottom: 1px solid #e5e7eb;
  }
  .thread-info {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  .thread-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
  }
  .thread-name {
    font-weight: 500;
  }
  .messages {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .message {
    max-width: 70%;
  }
  .message.sent {
    align-self: flex-end;
  }
  .message.received {
    align-self: flex-start;
  }
  .message-content {
    padding: 0.75rem 1rem;
    border-radius: 1rem;
    background: #f3f4f6;
  }
  .message.sent .message-content {
    background: var(--primary);
    color: white;
  }
  .message-time {
    font-size: 0.75rem;
    color: var(--text-secondary);
    margin-top: 0.25rem;
  }
  .message-input {
    padding: 1rem;
    border-top: 1px solid #e5e7eb;
    display: flex;
    gap: 1rem;
  }
  .message-input textarea {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    resize: none;
    max-height: 120px;
    font-family: inherit;
  }
  .send-button {
    padding: 0.75rem 1.5rem;
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 0.5rem;
    font-weight: 500;
    cursor: pointer;
  }
  .send-button:hover {
    opacity: 0.9;
  }
</style>